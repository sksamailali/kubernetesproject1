pipeline {
    agent {
        label 'docker-node' // Ensures the pipeline runs on a specific node with Docker installed
    }

    environment {
        SONAR_URL = "http://3.15.1.174:9000"
        GIT_REPO_NAME = "kubernetesproject1"
        GIT_USER_NAME = "sksamailali"
        DOCKER_IMAGE = "sksamailali/jomon:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checkout Passed"'
                // git branch: 'main', url: 'https://github.com/sksamailali/kubernetesproject1.git'
            }
        }
        stage('Run Inside Docker') {
            steps {
                script {
                    docker.image('abhishekf5/maven-abhishek-docker-agent:v1').inside('-v /var/run/docker.sock:/var/run/docker.sock') {
                        sh 'docker --version' // Check if Docker is available
                        sh 'mvn clean install'
                    }
                }
            }
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sanarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app 
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker_hub')
            }
            steps {
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app 
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker_hub") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config --global user.email "samail.xyz@gmail.com"
                        git config --global user.name "samail ali"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
